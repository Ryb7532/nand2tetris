// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static int RAM;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let RAM[2048] = 14334;
        let RAM[2049] = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int seg, next_seg;
        if (~(size > 0)) {
            do Sys.error(5);
        }
        let seg = 2048;
        while (~(seg = seg[1]) & (seg[0] < size)) {
            let next_seg = seg[1];
            if ((seg[0] = 0) | (next_seg[0] = 0)) {
                let seg = next_seg;
            } else {
                let seg[0] = next_seg - seg + next_seg[0];
                if (next_seg = next_seg[1]) {
                    let seg[1] = seg;
                } else {
                    let seg[1] = next_seg[1];
                }
            }
        }
        if (seg+size > 16379) {
            do Sys.error(6);
        }
        if (seg[0] > (size+2)) {
            let seg[size+2] = seg[0]-size-2;
            if (seg[1] = seg) {
                let seg[size+3] = seg+size+2;
            } else {
                let seg[size+3] = seg[1];
            }
            let seg[1] = seg+size+2;
        }
        let seg[0] = 0;
        return seg+2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int seg, next_seg;
        let seg = o - 2;
        let next_seg = seg[1];
        if (next_seg[0] = 0) {
            let seg[0] = next_seg - seg - 2;
        } else {
            let seg[0] = next_seg - seg + next_seg[0];
            if (next_seg[1] = next_seg) {
                let seg[1] = seg;
            } else {
                let seg[1] = next_seg[1];
            }
        }
        return;
    }
}
